import streamlit as st
import fitz  # PyMuPDF
import docx2txt
import pandas as pd
import io
import shutil
from rapidfuzz import fuzz
from openpyxl import load_workbook
import requests

st.set_page_config(page_title="AI-—Å–µ—Ä–≤–∏—Å –ø–æ–¥–±–æ—Ä–∞", layout="wide")
st.title("ü§ñ AI-—Å–µ—Ä–≤–∏—Å –ø–æ–¥–±–æ—Ä–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç—ã ‚Äî —Å–∏—Å—Ç–µ–º–∞ –≤—Å—ë —Å–¥–µ–ª–∞–µ—Ç —Å–∞–º–∞.")

# –ë–ª–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¢–ó
st.header("üìÑ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ")
uploaded_spec = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¢–ó (PDF, DOCX)", type=["pdf", "docx"])

# –ë–ª–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–π—Å–æ–≤
st.header("üìä –ü—Ä–∞–π—Å—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
uploaded_prices = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ 1 –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–π—Å–æ–≤ (Excel)", type=["xlsx"], accept_multiple_files=True)

# –ë–ª–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫–∏–¥–æ–∫
st.header("üí∏ –°–∫–∏–¥–∫–∏ –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)")
discounts_file = st.file_uploader("–§–∞–π–ª —Å–æ —Å–∫–∏–¥–∫–∞–º–∏ (Excel)", type=["xlsx"], accept_multiple_files=False)

# OCR API (—á–µ—Ä–µ–∑ ocr.space)
def extract_text_ocr_api(file_bytes):
    url = 'https://api.ocr.space/parse/image'
    response = requests.post(
        url,
        files={"file": file_bytes},
        data={
            "apikey": "K86918490388957",
            "language": "rus",
            "isOverlayRequired": False,
        },
    )
    try:
        result = response.json()
        return result["ParsedResults"][0]["ParsedText"]
    except:
        return ""

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¢–ó
def extract_text_from_spec(file):
    if file.name.endswith(".pdf"):
        try:
            pdf_doc = fitz.open(stream=file.read(), filetype="pdf")
            text = "".join([page.get_text() for page in pdf_doc])
            if len(text.strip()) < 10:
                file.seek(0)
                return extract_text_ocr_api(file)
            return text
        except:
            file.seek(0)
            return extract_text_ocr_api(file)
    elif file.name.endswith(".docx"):
        return docx2txt.process(file)
    return ""

# –§—É–Ω–∫—Ü–∏—è —á—Ç–µ–Ω–∏—è –ø—Ä–∞–π—Å–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–∏—Å–∫–æ–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
def read_prices(files):
    dfs = []
    for f in files:
        try:
            df_raw = pd.read_excel(f, header=None)
            header_row = df_raw.apply(lambda x: x.astype(str).str.contains("–∞—Ä—Ç–∏–∫—É–ª|–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ|–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞", case=False).any(), axis=1)
            if header_row.any():
                idx = header_row.idxmax()
                df = pd.read_excel(f, skiprows=idx)
                df['–ü–æ—Å—Ç–∞–≤—â–∏–∫'] = f.name
                dfs.append(df)
        except:
            st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {f.name}")
    return pd.concat(dfs, ignore_index=True) if dfs else pd.DataFrame()

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫–∏–¥–æ–∫

def load_discounts(discount_file):
    if discount_file:
        df = pd.read_excel(discount_file)
        return dict(zip(df.iloc[:, 0].astype(str), df.iloc[:, 1]))
    return {}

# –ü–æ–∏—Å–∫ –ª—É—á—à–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π

def match_top_variants(spec_text, df_prices, top_n=3):
    results = []
    for line in spec_text.split("\n"):
        line = line.strip()
        if len(line) < 5:
            continue
        candidates = []
        for _, row in df_prices.iterrows():
            row_str = " ".join([str(v) for v in row.values if isinstance(v, str)])
            score = fuzz.token_sort_ratio(line.lower(), row_str.lower())
            candidates.append((score, row))
        top_matches = sorted(candidates, key=lambda x: x[0], reverse=True)[:top_n]
        for score, row in top_matches:
            matched = row.to_dict()
            matched['–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ'] = score
            matched['–ò–∑ –¢–ó'] = line
            results.append(matched)
    return pd.DataFrame(results)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel

def generate_template_excel(df_result, discounts):
    template_path = "–§–æ—Ä–º–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.xlsx"
    export_path = "–ì–æ—Ç–æ–≤—ã–π_—Ä–µ–∑—É–ª—å—Ç–∞—Ç_–ø–æ_—à–∞–±–ª–æ–Ω—É.xlsx"
    shutil.copy(template_path, export_path)
    wb = load_workbook(export_path)
    ws = wb.active
    start_row = 4
    for i, row in df_result.iterrows():
        r = start_row + i
        price = row.get("–¶–µ–Ω–∞", 0)
        qty = row.get("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", 1)
        supplier = row.get("–ü–æ—Å—Ç–∞–≤—â–∏–∫", "")
        discount = discounts.get(str(supplier), 0)
        ws[f"A{r}"] = i + 1
        ws[f"C{r}"] = row.get("–ò–∑ –¢–ó", "")
        ws[f"D{r}"] = row.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", row.get("–ê–Ω–∞–ª–æ–≥", ""))
        ws[f"E{r}"] = f"{row.get('–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ', '')}%"
        ws[f"F{r}"] = qty
        ws[f"G{r}"] = price
        ws[f"H{r}"] = f"=G{r}*F{r}"
        ws[f"K{r}"] = row.get("–°—Å—ã–ª–∫–∞", "")
        ws[f"M{r}"] = price
        ws[f"N{r}"] = supplier
        ws[f"O{r}"] = discount
        ws[f"P{r}"] = f"=H{r}*(1 - O{r}/100)"
    wb.save(export_path)
    return export_path

# –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–¥–±–æ—Ä"):
    if uploaded_spec and uploaded_prices:
        st.success("–§–∞–π–ª—ã –ø–æ–ª—É—á–µ–Ω—ã! –ò–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞...")

        spec_text = extract_text_from_spec(uploaded_spec)
        if not spec_text.strip():
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –¢–ó. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.")
        st.subheader("üìú –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –¢–ó")
        st.text_area("", spec_text, height=300)

        df_prices = read_prices(uploaded_prices)
        st.subheader("üìã –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç")
        st.dataframe(df_prices.astype(str).head(20))

        if not df_prices.empty and spec_text:
            df_result = match_top_variants(spec_text, df_prices, top_n=3)
            st.subheader("‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–¥–æ 3 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–∞–∂–¥—É—é)")

            if not df_result.empty:
                min_match = st.slider("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è", 0, 100, 70)
                keyword = st.text_input("üîç –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É")

                filtered_df = df_result[df_result['–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ'] >= min_match]
                if keyword:
                    filtered_df = filtered_df[filtered_df.apply(lambda row: row.astype(str).str.contains(keyword, case=False).any(), axis=1)]

                st.dataframe(filtered_df.astype(str))

                discounts = load_discounts(discounts_file)

                if st.button("üìÑ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å Excel –ø–æ —à–∞–±–ª–æ–Ω—É"):
                    file_path = generate_template_excel(filtered_df, discounts)
                    with open(file_path, "rb") as f:
                        st.download_button("üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –ø–æ —à–∞–±–ª–æ–Ω—É", data=f, file_name="–ì–æ—Ç–æ–≤—ã–π_—Ä–µ–∑—É–ª—å—Ç–∞—Ç_–ø–æ_—à–∞–±–ª–æ–Ω—É.xlsx")
            else:
                st.warning("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    else:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏ –¢–ó, –∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∞–π—Å.")
