import streamlit as st
import fitz  # PyMuPDF
import docx2txt
import pandas as pd
import io
from rapidfuzz import fuzz

st.set_page_config(page_title="AI-—Å–µ—Ä–≤–∏—Å –ø–æ–¥–±–æ—Ä–∞", layout="wide")
st.title("ü§ñ AI-—Å–µ—Ä–≤–∏—Å –ø–æ–¥–±–æ—Ä–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç—ã ‚Äî —Å–∏—Å—Ç–µ–º–∞ –≤—Å—ë —Å–¥–µ–ª–∞–µ—Ç —Å–∞–º–∞.")

# –ë–ª–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¢–ó
st.header("üìÑ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ")
uploaded_spec = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¢–ó (PDF, DOCX)", type=["pdf", "docx"])

# –ë–ª–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–π—Å–æ–≤
st.header("üìä –ü—Ä–∞–π—Å—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
uploaded_prices = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ 1 –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–π—Å–æ–≤ (Excel)", type=["xlsx"], accept_multiple_files=True)

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¢–ó
def extract_text_from_spec(file):
    if file.name.endswith(".pdf"):
        text = ""
        pdf_doc = fitz.open(stream=file.read(), filetype="pdf")
        for page in pdf_doc:
            text += page.get_text()
        return text
    elif file.name.endswith(".docx"):
        return docx2txt.process(file)
    return ""

# –§—É–Ω–∫—Ü–∏—è —á—Ç–µ–Ω–∏—è –ø—Ä–∞–π—Å–æ–≤
def read_prices(files):
    dfs = []
    for f in files:
        try:
            df = pd.read_excel(f)
            dfs.append(df)
        except:
            st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {f.name}")
    return pd.concat(dfs, ignore_index=True) if dfs else pd.DataFrame()

# –§—É–Ω–∫—Ü–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
def match_positions(spec_text, df_prices):
    results = []
    for line in spec_text.split("\n"):
        line = line.strip()
        if len(line) < 5:
            continue
        best_match = None
        best_score = 0
        for _, row in df_prices.iterrows():
            for col in df_prices.columns:
                if isinstance(row[col], str):
                    score = fuzz.token_sort_ratio(line.lower(), row[col].lower())
                    if score > best_score:
                        best_score = score
                        best_match = row
        if best_match is not None and best_score > 60:
            matched = best_match.to_dict()
            matched['–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ'] = best_score
            matched['–ò–∑ –¢–ó'] = line
            results.append(matched)
    return pd.DataFrame(results)

# –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–¥–±–æ—Ä"):
    if uploaded_spec and uploaded_prices:
        st.success("–§–∞–π–ª—ã –ø–æ–ª—É—á–µ–Ω—ã! –ò–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞...")

        spec_text = extract_text_from_spec(uploaded_spec)
        st.subheader("üìú –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –¢–ó")
        st.text_area("", spec_text, height=300)

        df_prices = read_prices(uploaded_prices)
        st.subheader("üìã –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç")
        st.dataframe(df_prices.astype(str).head(20))
        if not df_prices.empty and spec_text:
            df_result = match_positions(spec_text, df_prices)
            st.subheader("‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏")
            st.dataframe(df_result)

            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                df_result.to_excel(writer, index=False, sheet_name='–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ')
            st.download_button("üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Excel", output.getvalue(), file_name="–ø–æ–¥–±–æ—Ä_—Ä–µ–∑—É–ª—å—Ç–∞—Ç.xlsx")
    else:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏ –¢–ó, –∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∞–π—Å.")

